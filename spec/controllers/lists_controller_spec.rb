require 'rails_helper'
include Sorcery::TestHelpers::Rails::Controller

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ListsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # List. As you add validations to List, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes){{
      title: 'list-title',
      items: "item-1\nitem-2\nitem-3",
      owner: @user
  }}

  let(:invalid_attributes){{
      title: 'list-title',
      owner: @user
  }}

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ListsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  before(:all) do
    @user = create(:user)
  end
  after(:all) do
    @user.destroy
  end

  describe "GET #index" do

    it "assigns all lists as @lists" do
      list = create(:list, {owner: @user})
      get :index
      expect(assigns(:lists)).to eq([list])
    end
  end

  describe "GET #show" do
    it "assigns the requested list as @list" do
      list = create(:list, {owner:@user})
      get :show, id: list.id
      expect(assigns(:list)).to eq(list)
    end
  end

  describe "GET #new" do
    it "assigns a new list as @list" do
      login_user @user
      get :new
      expect(assigns(:list)).to be_a_new(List)
    end
  end

  describe "GET #edit" do
    it "assigns the requested list as @list" do
      list = create(:list, {owner:@user})
      login_user @user
      get :edit, id: list.id
      expect(assigns(:list)).to eq(list)
    end
  end

  describe "POST #create" do
    before do
      login_user @user
    end
    context "with valid params" do
      let(:valid_attributes){{
          title: 'list-title',
          items: "item-1\nitem-2\nitem-3",
          owner: @user
      }}
      it "creates a new List" do
        expect {
          post :create, list: valid_attributes
        }.to change(List, :count).by(1)
      end

      it "assigns a newly created list as @list" do
        post :create, list: valid_attributes
        expect(assigns(:list)).to be_a(List)
        expect(assigns(:list)).to be_persisted
      end

      it "redirects to the created list" do
        post :create, list: valid_attributes
        expect(response).to redirect_to(List.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved list as @list" do
        post :create, list: invalid_attributes
        expect(assigns(:list)).to be_a_new(List)
      end

      it "re-renders the 'new' template" do
        post :create, list: invalid_attributes
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context 'login by @user' do
      before do
        login_user @user
      end
      context "with valid params" do
        let(:new_attributes) {{
            items: "upadted-1\nupdated-2\nupdated-2"
        }}

        it "updates the requested list" do
          list = create(:list, {owner:@user,items:"item-1"})
          put :update, id: list.id, list: new_attributes
          list.reload
          expect(list.item_array.length).to be 3
        end

        it "assigns the requested list as @list" do
          list = create(:list, {owner:@user})
          put :update, id: list.id, list: new_attributes
          expect(assigns(:list)).to eq(list)
        end

        it "redirects to the list" do
          list = create(:list, {owner:@user})
          put :update, id: list.id, list: new_attributes
          expect(response).to redirect_to(list)
        end
      end

      context "with invalid params" do
        before do
          @list = create(:list, {owner:@user})
          put :update, id: @list.id, list: invalid_attributes
        end
        let(:invalid_attributes) {{ items: "" }}
        it "assigns the list as @list" do
          expect(assigns(:list)).to eq(@list)
        end

        it "re-renders the 'edit' template" do
          expect(response).to render_template("edit")
        end
      end
    end
    context 'login by other' do
      before do
        other = create(:user, {email: "other@email.com"})
        login_user other
      end
      let(:new_attributes) {{
          items: "upadted-1\nupdated-2\nupdated-2"
      }}
      it "update other's list" do
        list = create(:list, {owner:@user})
        request.env['HTTP_REFERER'] = list_path(list)
        put :update, id: list.id, list: new_attributes
        expect(response).to redirect_to list_path(list)
      end
    end

  end

  describe "DELETE #destroy" do
    before do
      @list = create(:list, {owner:@user})
    end
    context 'login by @user' do
      before do
        login_user @user
      end
      it "destroys the requested list" do
        expect {
          delete :destroy, id: @list.id
        }.to change(List, :count).by(-1)
      end

      it "redirects to the lists list" do
        delete :destroy, id: @list.id
        expect(response).to redirect_to(lists_url)
      end
    end
    context 'login by other' do
      before do
        other = create(:user, {email: "other@email.com"})
        login_user other
      end
      it "destroys the requested list" do
        expect {
          delete :destroy, id: @list.id
        }.to change(List, :count).by(0)
      end

      it "redirects to the lists list" do
        delete :destroy, id: @list.id
        expect(response).to redirect_to(:root)
      end
    end
  end


  describe "PUT #like" do
    context "valid access" do
      before do
        user = create :user
        @list = create :list
        login_user user
      end
      subject {
        put :like, id: @list.id, rating:1, format: :json
      }
      it {
        is_expected.to have_http_status(:success)
        expect(assigns(:rating)).to be 1
      }
      it {
        expect{
          put :like, id: @list.id, rating:1, format: :json
        }.to change(@list.fans, :count).by(1)
      }
    end
    context "list isn't exist" do
      subject{
        user = create :user
        login_user user
        put :like, id: 100, rating:1, format: :json
      }
      it{ is_expected.to have_http_status(:not_found)}
    end
  end

  describe "DELETE" do
    before do
      user = create :user
      @list = create :list
      @list.add_fan(user)
      login_user user
    end
    it {
      expect{
        put :unlike, id: @list.id, format: :json
      }.to change(@list.fans, :count).by(-1)
    }

  end
end
